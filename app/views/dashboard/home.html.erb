<% provide(:title, 'Home') %>

<!-- Button trigger modal -->
<div align="center">
	<button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#newComment">
		New Comment
	</button>

	<button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#newProduct">
		New Product
	</button>

</div>
<!-- Modal -->
<div class="modal fade" id="newComment" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
				<h4 class="modal-title" id="myModalLabel">New Comment</h4>
			</div>
			<div class="modal-body">
				<% @comment = Comment.new %>
				<%= render partial: "comments/form" %>
			</div>
		</div>
	</div>
</div>

<!-- Modal -->
<div class="modal fade" id="newProduct" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<button type="button" class="close" data-dismiss="modal" aria-label="Close">
					<span aria-hidden="true">&times;</span>
				</button>
				<h4 class="modal-title" id="myModalLabel">New Product</h4>
			</div>
			<div class="modal-body">
				<% @product = Product.new %>
				<%= render partial: "products/form" %>
			</div>
		</div>
	</div>
</div>

<div class="container">
	<div class="row">
		<div class="col-md-7">

			<div id="map-container" style="margin-right: 10%;">
				<input id="pac-input" class="controls" type="text" placeholder="Search Box">
				<div id="map-canvas"></div>
			</div>
		</div>

		<div class="col-md-5">
			<div align="right" style="margin-left: 10%; margin-top: 25px; width: 100%;">
				<div class="accordion" id="accordion2">
					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle btn btn-primary" data-toggle="collapse" data-parent="#accordion2" href="#collapseOne" style="width: 100%;">View Comments</a>
						</div>
						<div id="collapseOne" class="accordion-body collapse">
							<div class="accordion-inner">
								<%= render partial: "dashboard/comments" %>
							</div>
						</div>
					</div>
					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle btn btn-primary" data-toggle="collapse" data-parent="#accordion2" href="#collapseTwo" style="width: 100%;">Shopping List</a>
						</div>
						<div id="collapseTwo" class="accordion-body collapse">
							<div class="accordion-inner">
								<%= render partial: "dashboard/products" %>
							</div>
						</div>
					</div>
					<div class="accordion-group">
						<div class="accordion-heading">
							<a class="accordion-toggle btn btn-primary" data-toggle="collapse" data-parent="#accordion2" href="#collapseThree" style="width: 100%;">Store Itinerary</a>
						</div>
						<div id="collapseThree" class="accordion-body collapse">
							<div class="accordion-inner">

							</div>
						</div>
					</div>
				</div>

			</div>
		</div>
	</div>
</div>

<script type="text/javascript">
	var myCenter = new google.maps.LatLng(44.854602, -93.242045);

	// Add a Return to Center control that returns the user to the center of the Mall of America
	function HomeControl(controlDiv, map) {
		controlDiv.style.padding = '5px';
		var controlUI = document.createElement('div');
		controlUI.style.backgroundColor = 'yellow';
		controlUI.style.border = '1px solid';
		controlUI.style.cursor = 'pointer';
		controlUI.style.textAlign = 'center';
		controlUI.title = 'Set map to center of Mall of America';
		controlDiv.appendChild(controlUI);
		var controlText = document.createElement('div');
		controlText.style.fontFamily = 'Calibri,sans-serif';
		controlText.style.fontSize = '12px';
		controlText.style.paddingLeft = '4px';
		controlText.style.paddingRight = '4px';
		controlText.innerHTML = '<b>Center Map<b>'
		controlUI.appendChild(controlText);

		// Setup click-event listener: simply set the map to London
		google.maps.event.addDomListener(controlUI, 'click', function() {
			map.setCenter(myCenter)
		});
	}

	function ResetViewControl(controlDiv, map) {
		controlDiv.style.padding = '5px';
		var controlUI = document.createElement('div');
		controlUI.style.backgroundColor = 'aqua';
		controlUI.style.border = '1px solid';
		controlUI.style.cursor = 'pointer';
		controlUI.style.textAlign = 'center';
		controlUI.title = 'Reset view to default view of the Mall of America';
		controlDiv.appendChild(controlUI);
		var controlText = document.createElement('div');
		controlText.style.fontFamily = 'Calibri,sans-serif';
		controlText.style.fontSize = '12px';
		controlText.style.paddingLeft = '4px';
		controlText.style.paddingRight = '4px';
		controlText.innerHTML = '<b>Reset View<b>'
		controlUI.appendChild(controlText);

		// Setup click-event listener: simply set the map to London
		google.maps.event.addDomListener(controlUI, 'click', function() {
			map.setCenter(myCenter);
			map.setZoom(17);
		});
	}

	function initialize() {

		var markers = [];
		var mapProp = {
		center : myCenter,
		zoom : 17,
		minZoom : 17,
		mapTypeControl: true,
    mapTypeControlOptions: {
        style: google.maps.MapTypeControlStyle.HORIZONTAL_BAR
    },
    zoomControl: true,
    zoomControlOptions: {
        style: google.maps.ZoomControlStyle.SMALL
    },
    scaleControl: true,
    streetViewControl: true,
	};
	var map = new google.maps.Map(document.getElementById('map-canvas'), mapProp);

	// Create a DIV to hold the control and call HomeControl()

	var homeControlDiv = document.createElement('div');
	var homeControl = new HomeControl(homeControlDiv, map);
	map.controls[google.maps.ControlPosition.RIGHT_CENTER].push(homeControlDiv);

	var resetViewControlDiv = document.createElement('div');
	var resetViewControl = new ResetViewControl(resetViewControlDiv, map);
	map.controls[google.maps.ControlPosition.LEFT_CENTER].push(resetViewControlDiv);

	google.maps.event.addListener(map, 'center_changed', function() {
		// Prevents map from being moved at max zoom level
		if (map.zoom == 17) {
			map.panTo(myCenter);
		}
	});

	google.maps.event.addListener(map, 'zoom_changed', function() {
		// Centers the map if you return to the max zoom level
		if (map.zoom == 17) {
			map.panTo(myCenter);
		}
	});

	var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(44.852373498451186, -93.24626143257143), new google.maps.LatLng(44.85683041531407, -93.23782856742861));
	map.fitBounds(defaultBounds);

	// Create the search box and link it to the UI element.
	var input = /** @type {HTMLInputElement} */(
		document.getElementById('pac-input'));
	map.controls[google.maps.ControlPosition.TOP_CENTER].push(input);

	var searchBox = new google.maps.places.SearchBox(
	/** @type {HTMLInputElement} */(input));

	// [START region_getplaces]
	// Listen for the event fired when the user selects an item from the
	// pick list. Retrieve the matching places for that item.
	google.maps.event.addListener(searchBox, 'places_changed', function() {
		var places = searchBox.getPlaces();

		if (places.length == 0) {
			return;
		}
		for (var i = 0,
		    marker; marker = markers[i]; i++) {
			marker.setMap(null);
		}

		// For each place, get the icon, place name, and location.
		markers = [];
		var bounds = new google.maps.LatLngBounds();
		for (var i = 0,
		    place; place = places[i]; i++) {
			var image = {
				url : place.icon,
				size : new google.maps.Size(71, 71),
				origin : new google.maps.Point(0, 0),
				anchor : new google.maps.Point(17, 34),
				scaledSize : new google.maps.Size(25, 25)
			};

			// Create a marker for each place.
			var marker = new google.maps.Marker({
				map : map,
				icon : image,
				title : place.name,
				position : place.geometry.location
			});

			markers.push(marker);

			bounds.extend(place.geometry.location);
			map.setZoom(20);
			map.panTo(place.geometry.location);
		}

		// map.fitBounds(bounds);
	});
	// [END region_getplaces]

	// Bias the SearchBox results towards places that are within the bounds of the
	// current map's viewport.
	google.maps.event.addListener(map, 'bounds_changed', function() {
		var bounds = map.getBounds();
		searchBox.setBounds(bounds);
	});
	}

	// google.maps.event.addDomListener(window, 'load', initialize);

	// function bounds() {
	// map.center.infowindow { content: map.getZoom(); }
	// }
</script>