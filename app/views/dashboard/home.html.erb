<!-- <h1>Home</h1> -->
<!-- <p id="p"></p>
<button onclick="bounds();">
Get bounds
</button>
<br />
<br /> -->
<div id="map-container">
	<input id="pac-input" class="controls" type="text" placeholder="Search Box">
	<div id="map-canvas"></div>
</div>
<!-- 
<button onclick="myFunction()">Show dialog</button>
<% @comment = Comment.new %>
<dialog id="myDialog"><%= render 'comments/form' %></dialog>

<script>
function myFunction() { 
    document.getElementById("myDialog").showModal(); 
} 
</script> -->
<script type="text/javascript">
	var myCenter = new google.maps.LatLng(44.854602, -93.242045);

	// Add a Return to Center control that returns the user to the center of the Mall of America
	function HomeControl(controlDiv, map) {
		controlDiv.style.padding = '5px';
		var controlUI = document.createElement('div');
		controlUI.style.backgroundColor = 'yellow';
		controlUI.style.border = '1px solid';
		controlUI.style.cursor = 'pointer';
		controlUI.style.textAlign = 'center';
		controlUI.title = 'Set map to center of Mall of America';
		controlDiv.appendChild(controlUI);
		var controlText = document.createElement('div');
		controlText.style.fontFamily = 'Calibri,sans-serif';
		controlText.style.fontSize = '12px';
		controlText.style.paddingLeft = '4px';
		controlText.style.paddingRight = '4px';
		controlText.innerHTML = '<b>Center Map<b>'
		controlUI.appendChild(controlText);

		// Setup click-event listener: simply set the map to London
		google.maps.event.addDomListener(controlUI, 'click', function() {
			map.setCenter(myCenter)
		});
	}

	function ResetViewControl(controlDiv, map) {
		controlDiv.style.padding = '5px';
		var controlUI = document.createElement('div');
		controlUI.style.backgroundColor = 'aqua';
		controlUI.style.border = '1px solid';
		controlUI.style.cursor = 'pointer';
		controlUI.style.textAlign = 'center';
		controlUI.title = 'Reset view to default view of the Mall of America';
		controlDiv.appendChild(controlUI);
		var controlText = document.createElement('div');
		controlText.style.fontFamily = 'Calibri,sans-serif';
		controlText.style.fontSize = '12px';
		controlText.style.paddingLeft = '4px';
		controlText.style.paddingRight = '4px';
		controlText.innerHTML = '<b>Reset View<b>'
		controlUI.appendChild(controlText);

		// Setup click-event listener: simply set the map to London
		google.maps.event.addDomListener(controlUI, 'click', function() {
			map.setCenter(myCenter);
			map.setZoom(17);
		});
	}
	
function initialize() {

  var markers = [];
  var mapProp = {
  	backgroundcolor: 'blue',
	center : myCenter,
	zoom : 17,
	minZoom : 17,
	mapTypeId: google.maps.MapTypeId.ROADMAP
  };
  var map = new google.maps.Map(document.getElementById('map-canvas'), mapProp);
  
  // Create a DIV to hold the control and call HomeControl()

	var homeControlDiv = document.createElement('div');
	var homeControl = new HomeControl(homeControlDiv, map);
	map.controls[google.maps.ControlPosition.TOP_RIGHT].push(homeControlDiv);

	var resetViewControlDiv = document.createElement('div');
	var resetViewControl = new ResetViewControl(resetViewControlDiv, map);
	map.controls[google.maps.ControlPosition.TOP_RIGHT].push(resetViewControlDiv);

	google.maps.event.addListener(map, 'center_changed', function() {
		// Prevents map from being moved at max zoom level
		if (map.zoom == 17) {
			map.panTo(myCenter);
		}
	});

	google.maps.event.addListener(map, 'zoom_changed', function() {
		// Centers the map if you return to the max zoom level
		if (map.zoom == 17) {
			map.panTo(myCenter);
		}
	});

	var defaultBounds = new google.maps.LatLngBounds(new google.maps.LatLng(44.852373498451186, -93.24626143257143), new google.maps.LatLng(44.85683041531407, -93.23782856742861));
	map.fitBounds(defaultBounds);

  // Create the search box and link it to the UI element.
  var input = /** @type {HTMLInputElement} */(
      document.getElementById('pac-input'));
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  var searchBox = new google.maps.places.SearchBox(
    /** @type {HTMLInputElement} */(input));

  // [START region_getplaces]
  // Listen for the event fired when the user selects an item from the
  // pick list. Retrieve the matching places for that item.
  google.maps.event.addListener(searchBox, 'places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }
    for (var i = 0, marker; marker = markers[i]; i++) {
      marker.setMap(null);
    }

    // For each place, get the icon, place name, and location.
    markers = [];
    var bounds = new google.maps.LatLngBounds();
    for (var i = 0, place; place = places[i]; i++) {
      var image = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      var marker = new google.maps.Marker({
        map: map,
        icon: image,
        title: place.name,
        position: place.geometry.location
      });

      markers.push(marker);

      bounds.extend(place.geometry.location);
      map.setZoom(20);
      map.panTo(place.geometry.location);
    }

    // map.fitBounds(bounds);
  });
  // [END region_getplaces]

  // Bias the SearchBox results towards places that are within the bounds of the
  // current map's viewport.
  google.maps.event.addListener(map, 'bounds_changed', function() {
    var bounds = map.getBounds();
    searchBox.setBounds(bounds);
  });
}

google.maps.event.addDomListener(window, 'load', initialize);


	// function bounds() {
		// map.center.infowindow { content: map.getZoom(); }
	// }
</script>

